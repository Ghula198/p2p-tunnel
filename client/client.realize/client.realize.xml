<?xml version="1.0"?>
<doc>
    <assembly>
        <name>client.realize</name>
    </assembly>
    <members>
        <member name="T:client.realize.messengers.clients.ClientInfoCaching">
            <summary>
            客户单缓存
            </summary>
        </member>
        <member name="P:client.realize.messengers.clients.ClientInfoCaching.OnOffline">
            <summary>
            下线
            </summary>
        </member>
        <member name="P:client.realize.messengers.clients.ClientInfoCaching.OnOfflineAfter">
            <summary>
            下线后
            </summary>
        </member>
        <member name="P:client.realize.messengers.clients.ClientInfoCaching.OnOnline">
            <summary>
            上线
            </summary>
        </member>
        <member name="P:client.realize.messengers.clients.ClientInfoCaching.OnAdd">
            <summary>
            添加
            </summary>
        </member>
        <member name="P:client.realize.messengers.clients.ClientInfoCaching.OnRemove">
            <summary>
            删除
            </summary>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.Add(client.messengers.clients.ClientInfo)">
            <summary>
            添加
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.Get(System.UInt64,client.messengers.clients.ClientInfo@)">
            <summary>
            获取
            </summary>
            <param name="id"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.GetByName(System.String,client.messengers.clients.ClientInfo@)">
            <summary>
            根据名字获取
            </summary>
            <param name="name"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.All">
            <summary>
            所有客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.AllIds">
            <summary>
            所有客户端id
            </summary>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.SetConnecting(System.UInt64,System.Boolean)">
            <summary>
            设置状态
            </summary>
            <param name="id"></param>
            <param name="val"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.Offline(System.UInt64,client.messengers.clients.ClientOfflineTypes)">
            <summary>
            下线
            </summary>
            <param name="id"></param>
            <param name="offlineType"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.Remove(System.UInt64)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.Online(System.UInt64,common.server.IConnection,client.messengers.clients.ClientConnectTypes,client.messengers.clients.ClientOnlineTypes)">
            <summary>
            上线
            </summary>
            <param name="id"></param>
            <param name="connection"></param>
            <param name="connectType"></param>
            <param name="onlineType"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.AddTunnelPort(System.UInt64,System.Int32)">
            <summary>
            新端口
            </summary>
            <param name="tunnelName"></param>
            <param name="port"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.GetTunnelPort(System.UInt64,System.Int32@)">
            <summary>
            新端口
            </summary>
            <param name="tunnelName"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.RemoveTunnelPort(System.UInt64)">
            <summary>
            删除新端口
            </summary>
            <param name="tunnelName"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.AddUdpserver(System.UInt64,common.server.servers.rudp.UdpServer)">
            <summary>
            新通道
            </summary>
            <param name="tunnelName"></param>
            <param name="server"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.GetUdpserver(System.UInt64,common.server.servers.rudp.UdpServer@)">
            <summary>
            新通道
            </summary>
            <param name="tunnelName"></param>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.RemoveUdpserver(System.UInt64,System.Boolean)">
            <summary>
            删除新通道
            </summary>
            <param name="tunnelName"></param>
            <param name="clear"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientInfoCaching.Clear">
            <summary>
            清除所有
            </summary>
        </member>
        <member name="T:client.realize.messengers.clients.ClientsMessenger">
            <summary>
            服务器发来的客户端列表
            </summary>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsMessenger.#ctor(client.realize.messengers.clients.ClientsMessengerSender,client.messengers.register.IRegisterTransfer)">
            <summary>
            
            </summary>
            <param name="clientsMessengerSender"></param>
            <param name="registerTransfer"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsMessenger.Notify(common.server.IConnection)">
            <summary>
            通知信息
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:client.realize.messengers.clients.ClientsMessengerSender">
            <summary>
            客户端消息发送
            </summary>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsMessengerSender.#ctor(common.server.MessengerSender)">
            <summary>
            
            </summary>
            <param name="messengerSender"></param>
        </member>
        <member name="P:client.realize.messengers.clients.ClientsMessengerSender.OnServerClientsData">
            <summary>
            收到服务器的客户端列表信息
            </summary>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsMessengerSender.GetTunnelPort(common.server.IConnection)">
            <summary>
            获取通道端口
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsMessengerSender.AddTunnel(common.server.IConnection,System.UInt64,System.UInt16,System.UInt16)">
            <summary>
            添加通道
            </summary>
            <param name="connection"></param>
            <param name="tunnelName"></param>
            <param name="port"></param>
            <param name="localPort"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsMessengerSender.RemoveTunnel(common.server.IConnection,System.UInt64)">
            <summary>
            删除通道
            </summary>
            <param name="connection"></param>
            <param name="tunnelName"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.clients.ClientsTransfer">
            <summary>
            客户端操作类
            </summary>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.#ctor(client.realize.messengers.clients.ClientsMessengerSender,client.messengers.punchHole.udp.IPunchHoleUdp,client.messengers.punchHole.tcp.IPunchHoleTcp,client.messengers.clients.IClientInfoCaching,client.messengers.register.RegisterStateInfo,client.realize.messengers.punchHole.PunchHoleMessengerSender,client.Config,common.server.IUdpServer,common.server.ITcpServer,client.realize.messengers.heart.HeartMessengerSender,client.realize.messengers.relay.RelayMessengerSender,client.messengers.clients.IClientsTunnel,client.messengers.relay.IClientConnectsCaching,client.messengers.punchHole.PunchHoleDirectionConfig)">
            <summary>
            
            </summary>
            <param name="clientsMessengerSender"></param>
            <param name="punchHoleUdp"></param>
            <param name="punchHoleTcp"></param>
            <param name="clientInfoCaching"></param>
            <param name="registerState"></param>
            <param name="punchHoleMessengerSender"></param>
            <param name="config"></param>
            <param name="udpServer"></param>
            <param name="tcpServer"></param>
            <param name="heartMessengerSender"></param>
            <param name="relayMessengerSender"></param>
            <param name="clientsTunnel"></param>
            <param name="connecRouteCaching"></param>
            <param name="punchHoleDirectionConfig"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.ConnectClient(System.UInt64)">
            <summary>
            连它
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.ConnectClient(client.messengers.clients.ClientInfo)">
            <summary>
            连它
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.ConnectReverse(System.UInt64)">
            <summary>
            连我
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.ConnectReverse(client.messengers.clients.ClientInfo)">
            <summary>
            连我
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.Reset(System.UInt64)">
            <summary>
            重启
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.ConnectStop(System.UInt64)">
            <summary>
            停止连接
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.Ping">
            <summary>
            ping
            </summary>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.Connects">
            <summary>
            获取各个客户端的连接状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.Delay(System.UInt64[][])">
            <summary>
            各个线路的延迟
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTransfer.Relay(common.server.IConnection,System.UInt64[],System.Boolean)">
            <summary>
            中继
            </summary>
            <param name="sourceConnection"></param>
            <param name="relayids"></param>
            <param name="notify"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.clients.ClientsTransfer.EnumConnectResult">
            <summary>
            打洞结果
            </summary>
        </member>
        <member name="F:client.realize.messengers.clients.ClientsTransfer.EnumConnectResult.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:client.realize.messengers.clients.ClientsTransfer.EnumConnectResult.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:client.realize.messengers.clients.ClientsTransfer.EnumConnectResult.BreakOff">
            <summary>
            跳过
            </summary>
        </member>
        <member name="T:client.realize.messengers.clients.ClientsTunnel">
            <summary>
            客户端打洞通道
            </summary>
        </member>
        <member name="P:client.realize.messengers.clients.ClientsTunnel.OnDisConnect">
            <summary>
            断开
            </summary>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTunnel.#ctor(client.realize.messengers.clients.ClientsMessengerSender,client.messengers.clients.IClientInfoCaching,client.messengers.register.RegisterStateInfo,client.Config,common.server.IUdpServer,common.server.ITcpServer)">
            <summary>
            
            </summary>
            <param name="clientsMessengerSender"></param>
            <param name="clientInfoCaching"></param>
            <param name="registerState"></param>
            <param name="config"></param>
            <param name="udpServer"></param>
            <param name="tcpServer"></param>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTunnel.NewBind(common.server.model.ServerType,System.UInt64)">
            <summary>
            新绑定
            </summary>
            <param name="serverType"></param>
            <param name="tunnelName"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTunnel.NewBindUdp(System.UInt16,System.Net.IPAddress,System.UInt64)">
            <summary>
            新绑定一个udp
            </summary>
            <param name="localport"></param>
            <param name="serverAddress"></param>
            <param name="tunnelName"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.clients.ClientsTunnel.NewBindTcp(System.UInt16,System.Net.IPAddress,System.UInt64)">
            <summary>
            新绑定一个tcp
            </summary>
            <param name="localport"></param>
            <param name="serverAddress"></param>
            <param name="tunnelName"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.crypto.CryptoMessenger">
            <summary>
            加密
            </summary>
        </member>
        <member name="M:client.realize.messengers.crypto.CryptoMessenger.#ctor(common.libs.IAsymmetricCrypto,common.libs.ICryptoFactory,client.messengers.clients.IClientInfoCaching,client.Config)">
            <summary>
            
            </summary>
            <param name="asymmetricCrypto"></param>
            <param name="cryptoFactory"></param>
            <param name="clientInfoCaching"></param>
            <param name="config"></param>
        </member>
        <member name="M:client.realize.messengers.crypto.CryptoMessenger.Key(common.server.IConnection)">
            <summary>
            获取key
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.crypto.CryptoMessenger.Set(common.server.IConnection)">
            <summary>
            设置密码
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.crypto.CryptoMessenger.Clear(common.server.IConnection)">
            <summary>
            清除
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.crypto.CryptoMessenger.Test(common.server.IConnection)">
            <summary>
            测试一下
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.crypto.CryptoSwap">
            <summary>
            秘钥交换
            </summary>
        </member>
        <member name="M:client.realize.messengers.crypto.CryptoSwap.#ctor(common.server.MessengerSender,common.libs.ICryptoFactory)">
            <summary>
            
            </summary>
            <param name="messengerSender"></param>
            <param name="cryptoFactory"></param>
        </member>
        <member name="M:client.realize.messengers.crypto.CryptoSwap.Swap(common.server.IConnection,common.server.IConnection,System.String)">
            <summary>
            交换秘钥
            </summary>
            <param name="tcp"></param>
            <param name="udp"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.crypto.CryptoSwap.Test(common.server.IConnection)">
            <summary>
            测试加密
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.heart.HeartMessenger">
            <summary>
            心跳包
            </summary>
        </member>
        <member name="M:client.realize.messengers.heart.HeartMessenger.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.heart.HeartMessenger.Alive(common.server.IConnection)">
            <summary>
            活着
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.heart.HeartMessengerSender">
            <summary>
            心跳消息发送
            </summary>
        </member>
        <member name="M:client.realize.messengers.heart.HeartMessengerSender.#ctor(common.server.MessengerSender)">
            <summary>
            
            </summary>
            <param name="messengerSender"></param>
        </member>
        <member name="M:client.realize.messengers.heart.HeartMessengerSender.Heart(common.server.IConnection)">
            <summary>
            发送心跳消息
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.Plugin">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.Plugin.LoadAfter(Microsoft.Extensions.DependencyInjection.ServiceProvider,System.Reflection.Assembly[])">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="assemblys"></param>
        </member>
        <member name="M:client.realize.messengers.Plugin.LoadBefore(Microsoft.Extensions.DependencyInjection.ServiceCollection,System.Reflection.Assembly[])">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="assemblys"></param>
        </member>
        <member name="T:client.realize.messengers.punchHole.PunchHoleMessenger">
            <summary>
            打洞消息
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessenger.#ctor(client.realize.messengers.punchHole.PunchHoleMessengerSender)">
            <summary>
            
            </summary>
            <param name="punchHoleMessengerSender"></param>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessenger.Response(common.server.IConnection)">
            <summary>
            打洞消息回执
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessenger.Request(common.server.IConnection)">
            <summary>
            打洞消息
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.punchHole.PunchHoleMessengerSender">
            <summary>
            打洞消息
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.#ctor(common.server.MessengerSender,client.messengers.register.RegisterStateInfo,Microsoft.Extensions.DependencyInjection.ServiceProvider)">
            <summary>
            
            </summary>
            <param name="messengerSender"></param>
            <param name="registerState"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.LoadPlugins(System.Reflection.Assembly[])">
            <summary>
            加载插件
            </summary>
            <param name="assemblys"></param>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.OnPunchHole(client.messengers.punchHole.OnPunchHoleArg)">
            <summary>
            收到打洞消息
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.OnResponse(common.server.model.PunchHoleResponseInfo)">
            <summary>
            收到回执
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.Response(common.server.IConnection,common.server.model.PunchHoleRequestInfo)">
            <summary>
            发送回执
            </summary>
            <param name="connection"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.Request``1(client.realize.messengers.punchHole.SendPunchHoleArg{``0},System.UInt64)">
            <summary>
            发送请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arg"></param>
            <param name="requestid"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.RequestReply``1(client.realize.messengers.punchHole.SendPunchHoleArg{``0})">
            <summary>
            发送等待回执的请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.PunchHoleMessengerSender.OnReverse">
            <summary>
            收到反向连接
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.SendReverse(client.messengers.clients.ClientInfo)">
            <summary>
            通知其反向连接
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.PunchHoleMessengerSender.OnTunnel">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.SendTunnel(System.UInt64,System.UInt64)">
            <summary>
            通知其开启新通道
            </summary>
            <param name="toid"></param>
            <param name="tunnelName"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.SendReset(System.UInt64)">
            <summary>
            通知其重置注册
            </summary>
            <param name="toid"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleMessengerSender.SendOffline(System.UInt64)">
            <summary>
            通知其掉线
            </summary>
            <param name="toid"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.punchHole.SendPunchHoleArg`1">
            <summary>
            发送打洞消息的参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:client.realize.messengers.punchHole.SendPunchHoleArg`1.Connection">
            <summary>
            连接
            </summary>
        </member>
        <member name="P:client.realize.messengers.punchHole.SendPunchHoleArg`1.ToId">
            <summary>
            给谁
            </summary>
        </member>
        <member name="P:client.realize.messengers.punchHole.SendPunchHoleArg`1.TunnelName">
            <summary>
            通道
            </summary>
        </member>
        <member name="P:client.realize.messengers.punchHole.SendPunchHoleArg`1.Index">
            <summary>
            次数
            </summary>
        </member>
        <member name="P:client.realize.messengers.punchHole.SendPunchHoleArg`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:client.realize.messengers.punchHole.TimeoutState">
            <summary>
            请求消息超时缓存
            </summary>
        </member>
        <member name="P:client.realize.messengers.punchHole.TimeoutState.RequestId">
            <summary>
            请求id
            </summary>
        </member>
        <member name="P:client.realize.messengers.punchHole.TimeoutState.Tcs">
            <summary>
            task
            </summary>
        </member>
        <member name="T:client.realize.messengers.punchHole.PunchHoleOffline">
            <summary>
            掉线
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleOffline.#ctor(client.messengers.clients.IClientInfoCaching)">
            <summary>
            
            </summary>
            <param name="clientInfoCaching"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.PunchHoleOffline.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleOffline.Execute(client.messengers.punchHole.OnPunchHoleArg)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:client.realize.messengers.punchHole.PunchHoleReset">
            <summary>
            重启
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleReset.#ctor(client.messengers.register.IRegisterTransfer)">
            <summary>
            
            </summary>
            <param name="registerTransfer"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.PunchHoleReset.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleReset.Execute(client.messengers.punchHole.OnPunchHoleArg)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:client.realize.messengers.punchHole.PunchHoleReverse">
            <summary>
            反向连接
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleReverse.#ctor(client.realize.messengers.punchHole.PunchHoleMessengerSender)">
            <summary>
            
            </summary>
            <param name="punchHoleMessengerSender"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.PunchHoleReverse.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleReverse.Execute(client.messengers.punchHole.OnPunchHoleArg)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:client.realize.messengers.punchHole.PunchHoleTunnel">
            <summary>
            收到新通道消息
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleTunnel.#ctor(client.realize.messengers.punchHole.PunchHoleMessengerSender)">
            <summary>
            
            </summary>
            <param name="punchHoleMessengerSender"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.PunchHoleTunnel.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.PunchHoleTunnel.Execute(client.messengers.punchHole.OnPunchHoleArg)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssB">
            <summary>
            tcp打洞消息
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssB.#ctor(client.messengers.punchHole.tcp.IPunchHoleTcp)">
            <summary>
            
            </summary>
            <param name="punchHoleTcp"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssB.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssB.Execute(client.messengers.punchHole.OnPunchHoleArg)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender">
            <summary>
            tcp打洞
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.#ctor(client.realize.messengers.punchHole.PunchHoleMessengerSender,common.server.ITcpServer,client.messengers.register.RegisterStateInfo,client.realize.messengers.crypto.CryptoSwap,client.Config,common.libs.WheelTimer{System.Object},client.messengers.clients.IClientInfoCaching,client.messengers.clients.IClientsTunnel)">
            <summary>
            
            </summary>
            <param name="punchHoleMessengerSender"></param>
            <param name="tcpServer"></param>
            <param name="registerState"></param>
            <param name="cryptoSwap"></param>
            <param name="config"></param>
            <param name="wheelTimer"></param>
            <param name="clientInfoCaching"></param>
            <param name="clientsTunnel"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnSendHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.Send(client.messengers.punchHole.ConnectParams)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep1Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep1(client.messengers.punchHole.OnStep1Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep2Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep2(client.messengers.punchHole.OnStep2Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep2RetryHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep2Retry(client.messengers.punchHole.tcp.OnStep2RetryParams)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep2FailHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep2Fail(client.messengers.punchHole.OnStep2FailParams)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep2Stop(client.messengers.punchHole.tcp.OnStep2StopParams)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep3Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep3(client.messengers.punchHole.OnStep3Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep4Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnStep4(client.messengers.punchHole.OnStep4Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.SendStep1(client.messengers.punchHole.ConnectParams)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.SendStep2(client.messengers.punchHole.OnStep1Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.OnSendStep2FailHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.tcp.nutssb.PunchHoleTcpNutssBMessengerSender.SendStep2Stop(System.UInt64)">
            <summary>
            
            </summary>
            <param name="toid"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender">
            <summary>
            rudp打洞
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.#ctor(client.realize.messengers.punchHole.PunchHoleMessengerSender,client.messengers.register.RegisterStateInfo,client.realize.messengers.crypto.CryptoSwap,client.Config,common.libs.WheelTimer{System.Object},client.messengers.clients.IClientInfoCaching,client.messengers.clients.IClientsTunnel)">
            <summary>
            
            </summary>
            <param name="punchHoleMessengerSender"></param>
            <param name="registerState"></param>
            <param name="cryptoSwap"></param>
            <param name="config"></param>
            <param name="wheelTimer"></param>
            <param name="clientInfoCaching"></param>
            <param name="clientsTunnel"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnSendHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.Send(client.messengers.punchHole.ConnectParams)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep1Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep1(client.messengers.punchHole.OnStep1Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep2Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep2(client.messengers.punchHole.OnStep2Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep21Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep21(client.messengers.punchHole.OnStep21Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep2FailHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep2Fail(client.messengers.punchHole.OnStep2FailParams)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep3Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep3(client.messengers.punchHole.OnStep3Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep4Handler">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleRUdpMessengerSender.OnStep4(client.messengers.punchHole.OnStep4Params)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:client.realize.messengers.punchHole.udp.PunchHoleUdp">
            <summary>
            udp打洞消息
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleUdp.#ctor(client.messengers.punchHole.udp.IPunchHoleUdp)">
            <summary>
            
            </summary>
            <param name="punchHoleUdp"></param>
        </member>
        <member name="P:client.realize.messengers.punchHole.udp.PunchHoleUdp.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.punchHole.udp.PunchHoleUdp.Execute(client.messengers.punchHole.OnPunchHoleArg)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:client.realize.messengers.register.RegisterMessengerSender">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.register.RegisterMessengerSender.#ctor(common.server.MessengerSender,client.messengers.register.RegisterStateInfo,client.Config)">
            <summary>
            
            </summary>
            <param name="messengerSender"></param>
            <param name="registerState"></param>
            <param name="config"></param>
        </member>
        <member name="M:client.realize.messengers.register.RegisterMessengerSender.Register(client.realize.messengers.register.RegisterParams)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.register.RegisterMessengerSender.Notify">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.register.RegisterMessengerSender.Exit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.register.TunnelRegisterParams">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.register.TunnelRegisterParams.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.TunnelRegisterParams.TunnelName">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.TunnelRegisterParams.LocalPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.TunnelRegisterParams.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.TunnelRegisterParams.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="T:client.realize.messengers.register.RegisterParams">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterParams.ShortId">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterParams.GroupId">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterParams.ClientName">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterParams.LocalIps">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterParams.Timeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterParams.LocalUdpPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterParams.LocalTcpPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterParams.ClientAccess">
            <summary>
            
            </summary>
        </member>
        <member name="T:client.realize.messengers.register.RegisterResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterResult.NetState">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.register.RegisterResult.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:client.realize.messengers.register.RegisterTransfer">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.register.RegisterTransfer.#ctor(client.realize.messengers.register.RegisterMessengerSender,client.messengers.clients.IClientInfoCaching,common.server.ITcpServer,common.server.IUdpServer,client.Config,client.messengers.register.RegisterStateInfo,client.realize.messengers.crypto.CryptoSwap,client.IIPv6AddressRequest)">
            <summary>
            
            </summary>
            <param name="registerMessageHelper"></param>
            <param name="clientInfoCaching"></param>
            <param name="tcpServer"></param>
            <param name="udpServer"></param>
            <param name="config"></param>
            <param name="registerState"></param>
            <param name="cryptoSwap"></param>
            <param name="iPv6AddressRequest"></param>
        </member>
        <member name="M:client.realize.messengers.register.RegisterTransfer.Exit">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.register.RegisterTransfer.Register(System.Boolean)">
            <summary>
            注册
            </summary>
            <param name="autoReg">强行自动注册</param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.relay.ClientConnectsCaching">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.relay.ClientConnectsCaching.Connects">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.relay.ClientConnectsCaching.AddConnects(common.server.model.ConnectsInfo)">
            <summary>
            
            </summary>
            <param name="connects"></param>
        </member>
        <member name="M:client.realize.messengers.relay.ClientConnectsCaching.Remove(System.UInt64)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:client.realize.messengers.relay.ClientConnectsCaching.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:client.realize.messengers.relay.RelayMessenger">
            <summary>
            中继
            </summary>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessenger.#ctor(client.messengers.clients.IClientInfoCaching,client.realize.messengers.relay.RelayMessengerSender,common.server.IRelayValidator,client.messengers.relay.IClientConnectsCaching,client.messengers.register.RegisterStateInfo,client.Config)">
            <summary>
            
            </summary>
            <param name="clientInfoCaching"></param>
            <param name="relayMessengerSender"></param>
            <param name="relayValidator"></param>
            <param name="connecRouteCaching"></param>
            <param name="registerStateInfo"></param>
            <param name="config"></param>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessenger.Relay(common.server.IConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessenger.Delay(common.server.IConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessenger.AskConnects(common.server.IConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessenger.Connects(common.server.IConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:client.realize.messengers.relay.RelayMessengerSender">
            <summary>
            
            </summary>
        </member>
        <member name="P:client.realize.messengers.relay.RelayMessengerSender.OnRelay">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessengerSender.#ctor(common.server.MessengerSender,client.messengers.register.RegisterStateInfo)">
            <summary>
            
            </summary>
            <param name="messengerSender"></param>
            <param name="registerStateInfo"></param>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessengerSender.Relay(System.UInt64[],common.server.IConnection)">
            <summary>
            通知其要使用中继
            </summary>
            <param name="relayids"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessengerSender.Delay(System.UInt64[],common.server.IConnection)">
            <summary>
            中继延迟
            </summary>
            <param name="relayids"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessengerSender.AskConnects">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:client.realize.messengers.relay.RelayMessengerSender.Connects(common.server.model.ConnectsInfo)">
            <summary>
            
            </summary>
            <param name="connects"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.relay.RelaySourceConnectionSelector">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.relay.RelaySourceConnectionSelector.#ctor(client.messengers.clients.IClientInfoCaching,client.messengers.relay.IClientConnectsCaching)">
            <summary>
            
            </summary>
            <param name="clientInfoCaching"></param>
            <param name="connecRouteCaching"></param>
        </member>
        <member name="M:client.realize.messengers.relay.RelaySourceConnectionSelector.Select(common.server.IConnection,System.UInt64)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="relayid"></param>
            <returns></returns>
        </member>
        <member name="T:client.realize.messengers.relay.RelayValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:client.realize.messengers.relay.RelayValidator.#ctor(client.Config)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:client.realize.messengers.relay.RelayValidator.Validate(common.server.IConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
    </members>
</doc>
