name: Publich

on:
  push:
    branches: [ "master" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: setup
      uses: actions/setup-dotnet@v2
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        dotnet-version: 6.0.x
        
    - name: restore
      run: 
        dotnet restore ./client/client.service & 
        dotnet restore ./server/server.service
        
    - name: publish
      run: 
        mkdir publish &&
        dotnet publish ./client/client.service -c release -f net6.0 -o ./publish/any/client &&
        dotnet publish ./server/server.service -c release -f net6.0 -o ./publish/any/server &&
        dotnet publish ./client/client.service -c release -f net6.0 -o ./publish/win-x64-single/client	-r win-x64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./server/server.service -c release -f net6.0 -o ./publish/win-x64-single/server	-r win-x64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./client/client.service -c release -f net6.0 -o ./publish/win-arm64-single/client	-r win-arm64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./server/server.service -c release -f net6.0 -o ./publish/win-arm64-single/server	-r win-arm64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./client/client.service -c release -f net6.0 -o ./publish/linux-x64-single/client	-r linux-x64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./server/server.service -c release -f net6.0 -o ./publish/linux-x64-single/server	-r linux-x64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./client/client.service -c release -f net6.0 -o ./publish/linux-arm64-single/client	-r linux-arm64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./server/server.service -c release -f net6.0 -o ./publish/linux-arm64-single/server	-r linux-arm64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./client/client.service -c release -f net6.0 -o ./publish/osx-x64-single/client	-r osx-x64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./server/server.service -c release -f net6.0 -o ./publish/osx-x64-single/server	-r osx-x64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./client/client.service -c release -f net6.0 -o ./publish/osx-arm64-single/client	-r osx-arm64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        dotnet publish ./server/server.service -c release -f net6.0 -o ./publish/osx-arm64-single/server	-r osx-arm64		--self-contained true  -p:DebugType=none -p:DebugSymbols=false  -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true &&
        tar -cvf any.tgz -C ./publish/any * &&
        tar -cvf win-x64-single.tgz -C ./publish/win-x64-single * &&
        tar -cvf win-arm64-single.tgz -C ./publish/win-arm64-single * &&
        tar -cvf linux-x64-single.tgz -C ./publish/linux-x64-single * &&
        tar -cvf linux-arm64-single.tgz -C ./publish/linux-arm64-single * &&
        tar -cvf osx-x64-single.tgz -C ./publish/osx-x64-single * &&
        tar -cvf osx-arm64-single.tgz -C ./publish/osx-arm64-single * 
    
    - name: get current date
      id: date
      run: echo "::set-output name=today::$(date +'%Y-%m-%d')"
    
    - name: create release
      id: create_release
      uses: actions/create-release@master
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.date.outputs.today }}
        draft: false
        prerelease: false
        
    - name: upload any
      id: upload-any
      uses: actions/upload-release-asset@master
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./any.tgz
        asset_name: any.tgz
        asset_content_type: application/x-tgz
    
    - name: upload win x64 single
      id: upload-win-x64
      uses: actions/upload-release-asset@master
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./win-x64-single.tgz
        asset_name: win-x64-single.tgz
        asset_content_type: application/x-tgz
    
    - name: upload win arm64 single
      id: upload-win-arm64
      uses: actions/upload-release-asset@master
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./win-arm64-single.tgz
        asset_name: win-arm64-single.tgz
        asset_content_type: application/x-tgz

    - name: upload linux x64 single
      id: upload-linux-x64
      uses: actions/upload-release-asset@master
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-x64-single.tgz
        asset_name: linux-x64-single.tgz
        asset_content_type: application/x-tgz
    
    - name: upload linux arm64 single
      id: upload-linux-arm64
      uses: actions/upload-release-asset@master
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-arm64-single.tgz
        asset_name: linux-arm64-single.tgz
        asset_content_type: application/x-tgz
    
    - name: upload osx x64 single
      id: upload-osx-x64
      uses: actions/upload-release-asset@master
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./osx-x64-single.tgz
        asset_name: osx-x64-single.tgz
        asset_content_type: application/x-tgz
    
    - name: upload osx arm64 single
      id: upload-osx-arm64
      uses: actions/upload-release-asset@master
      env:
          GITHUB_TOKEN: '${{ secrets.ACTIONS_TOKEN }}'
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./osx-arm64-single.tgz
        asset_name: osx-arm64-single.tgz
        asset_content_type: application/x-tgz
        
