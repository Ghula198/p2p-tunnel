<?xml version="1.0"?>
<doc>
    <assembly>
        <name>common.libs</name>
    </assembly>
    <members>
        <member name="T:common.libs.Command">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.Command.Windows(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.Command.Linux(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.Command.Osx(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.Command.Execute(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.Command.Execute(System.String,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="arg"></param>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.ICryptoFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.ICryptoFactory.CreateSymmetric(System.String)">
            <summary>
            对称加密
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.ICryptoFactory.CreateAsymmetric(common.libs.RsaKey)">
            <summary>
            非对称加密
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.CryptoFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.CryptoFactory.CreateSymmetric(System.String)">
            <summary>
            对称加密
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.CryptoFactory.CreateAsymmetric(common.libs.RsaKey)">
            <summary>
            非对称加密
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.ICrypto">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.ICrypto.Encode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.ICrypto.Encode(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.ICrypto.Decode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.ICrypto.Decode(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.IAsymmetricCrypto">
            <summary>
            非对称加密
            </summary>
        </member>
        <member name="P:common.libs.IAsymmetricCrypto.Key">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.RsaCrypto">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.RsaCrypto.Key">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.RsaCrypto.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.RsaCrypto.#ctor(common.libs.RsaKey)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:common.libs.RsaCrypto.Decode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.RsaCrypto.Decode(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.RsaCrypto.Encode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.RsaCrypto.Encode(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.RsaCrypto.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.RsaKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.RsaKey.PrivateKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.RsaKey.PublicKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.ISymmetricCrypto">
            <summary>
            对称加密
            </summary>
        </member>
        <member name="T:common.libs.AesCrypto">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.AesCrypto.#ctor(System.String@)">
            <summary>
            
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:common.libs.AesCrypto.Encode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.AesCrypto.Encode(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.AesCrypto.Decode(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.AesCrypto.Decode(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.AesCrypto.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.database.IConfigDataProvider`1">
            <summary>
            配置文件缓存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:common.libs.database.IConfigDataProvider`1.Load">
            <summary>
            加载
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.database.IConfigDataProvider`1.LoadString">
            <summary>
            加载
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.database.IConfigDataProvider`1.Save(`0)">
            <summary>
            保存
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.database.IConfigDataProvider`1.Save(System.String)">
            <summary>
            保存
            </summary>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.database.ConfigDataFileProvider`1">
            <summary>
            配置文件的文件缓存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:common.libs.database.ConfigDataFileProvider`1.Load">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.database.ConfigDataFileProvider`1.LoadString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.database.ConfigDataFileProvider`1.Save(`0)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.database.ConfigDataFileProvider`1.Save(System.String)">
            <summary>
            
            </summary>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.DateTimeHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.DateTimeHelper.GetTimeStamp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:common.libs.MemoryByteDictionaryComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.MemoryByteDictionaryComparer.Equals(System.ReadOnlyMemory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.MemoryByteDictionaryComparer.GetHashCode(System.ReadOnlyMemory{System.Byte})">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.IPEndPointDictionaryComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.IPEndPointDictionaryComparer.Equals(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.IPEndPointDictionaryComparer.GetHashCode(System.Net.IPEndPoint)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.BooleanExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.BooleanExtends.ToBytes(System.Boolean)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.BooleanExtends.GetBool(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.BooleanExtends.GetBool(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.BooleanExtends.GetBool(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.BooleanExtends.GetBool(System.Memory{System.Byte})">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.ByteArrayExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.ByteArrayExtends.ToBytes(System.Int32[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.ByteArrayExtends.DeBytes2IntArray(System.ReadOnlyMemory{System.Byte})">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.ByteArrayExtends.ToBytes(System.UInt16[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.ByteArrayExtends.DeBytes2UInt16Array(System.ReadOnlyMemory{System.Byte})">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.ByteArrayExtends.GZip(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.ByteArrayExtends.UnGZip(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.EndPointExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.EndPointExtends.IsLan(System.Net.IPEndPoint)">
            <summary>
            判断是不是本地地址
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.EndPointExtends.IsLan(System.Net.IPAddress)">
            <summary>
            
            </summary>
            <param name="adress"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.EndPointExtends.GetAddressBytes(System.Net.IPEndPoint)">
            <summary>
            
            </summary>
            <param name="ep"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.EnumExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.EnumExtends.GetDesc(System.Enum,System.Byte)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.FileExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.FileExtends.TryDeleteFile(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.NumberExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToBytes(System.Double)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToDouble(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="startindex"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToDouble(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToDouble(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToBytes(System.Int64)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToBytes(System.UInt64)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt64(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="startindex"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="startindex"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt64(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt64(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt64(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt64(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToBytes(System.UInt32)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt32(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="startindex"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="startindex"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt32(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt32(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt32(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt32(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToBytes(System.Int16)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToBytes(System.UInt16)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt16(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="startindex"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="startindex"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt16(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt16(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToInt16(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.NumberExtends.ToUInt16(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.SerialzeExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.SerialzeExtends.ToJson(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.SerialzeExtends.DeJson``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.SocketExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.SocketExtends.IPv6Only(System.Net.Sockets.Socket,System.Net.Sockets.AddressFamily,System.Boolean)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="family"></param>
            <param name="val"></param>
        </member>
        <member name="M:common.libs.extends.SocketExtends.SafeClose(System.Net.Sockets.Socket)">
            <summary>
            
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:common.libs.extends.SocketExtends.Reuse(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="reuse"></param>
        </member>
        <member name="M:common.libs.extends.SocketExtends.ReuseBind(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="ip"></param>
        </member>
        <member name="M:common.libs.extends.SocketExtends.KeepAlive(System.Net.Sockets.Socket,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="time">多久没数据活动就发送一次</param>
            <param name="interval">间隔多久尝试一次</param>
            <param name="retryCount">尝试几次</param>
        </member>
        <member name="M:common.libs.extends.SocketExtends.GetKeepAliveData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.StringExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.StringExtends.SubStr(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="start"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.StringExtends.Md5(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.StringExtends.ToBytes(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.StringExtends.GetString(System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.StringExtends.GetString(System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.StringExtends.GetString(System.Memory{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.extends.StringExtends.GetString(System.ReadOnlyMemory{System.Byte})">
            <summary>
            
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.extends.StructExtends">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.extends.StructExtends.StructToBytes(System.Object)">
            <summary>
            
            </summary>
            <param name="structObj"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.GCHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.GCHelper.SetProcessWorkingSetSize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="proc"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.GCHelper.FlushMemory">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.GCHelper.Gc(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:common.libs.Helper">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.Helper.EmptyArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.Helper.EmptyUlongArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.Helper.TrueArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.Helper.FalseArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.Helper.AnyIpArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.Helper.SeparatorString">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.Helper.SeparatorChar">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.Helper.Version">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.Helper.GetStackTraceModelName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:common.libs.jsonConverters.IPAddressJsonConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.jsonConverters.IPAddressJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.jsonConverters.IPAddressJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Net.IPAddress,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:common.libs.jsonConverters.IPEndpointJsonConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.jsonConverters.IPEndpointJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.jsonConverters.IPEndpointJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Net.IPEndPoint,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:common.libs.Logger">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.Logger.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.Logger.OnLogger">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.Logger.PaddingWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.Logger.Debug(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:common.libs.Logger.DebugDebug(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:common.libs.Logger.Info(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:common.libs.Logger.Warning(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:common.libs.Logger.DebugWarning(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:common.libs.Logger.Error(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:common.libs.Logger.Error(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:common.libs.Logger.DebugError(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="args"></param>
        </member>
        <member name="M:common.libs.Logger.DebugError(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:common.libs.Logger.Enqueue(common.libs.LoggerModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:common.libs.LoggerModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.LoggerModel.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.LoggerModel.Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.LoggerModel.Content">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.LoggerTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.LoggerTypes.DEBUG">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.LoggerTypes.INFO">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.LoggerTypes.WARNING">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.LoggerTypes.ERROR">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.NetworkHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.NetworkHelper.GetMacAddress(System.String)">
            <summary>
            
            </summary>
            <param name="hostip"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.GetRouteLevel">
            <summary>
            获取路由层数，自己与外网距离几个网关，用于发送一个对方网络收不到没有回应的数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.GetTraceRoute(System.String)">
            <summary>
            
            </summary>
            <param name="hostNameOrAddress"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.Ping(System.Net.IPAddress,System.Int32)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.GetRandomPort(System.Collections.Generic.List{System.UInt16})">
            <summary>
            获取一个随机端口
            </summary>
            <param name="usedPorts"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.GetUsedPort">
            <summary>
            获取已使用过的端口
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.GetDomainIp(System.String)">
            <summary>
            域名解析
            </summary>
            <param name="domain"></param>                      
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.EndpointToArray(System.String,System.UInt16)">
            <summary>
            地址转数组，端口必须2字节
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.EndpointToArray(System.Memory{System.Byte},System.Memory{System.Byte})">
            <summary>
            地址转数组，端口必须2字节
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.PortFromArray(System.Memory{System.Byte})">
            <summary>
            从数组获取端口
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.EndpointFromArray(System.Memory{System.Byte})">
            <summary>
            从数组中解析地址，端口必须2字节
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.Mac2Bytes(System.String)">
            <summary>
            
            </summary>
            <param name="mac"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.NetworkHelper.MagicPacket(System.String)">
            <summary>
            
            </summary>
            <param name="mac"></param>
            <returns></returns>
        </member>
        <member name="F:common.libs.NetworkHelper.IPv6Support">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.NumberSpace">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.NumberSpace.#ctor(System.UInt64)">
            <summary>
            
            </summary>
            <param name="defaultVal"></param>
        </member>
        <member name="M:common.libs.NumberSpace.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.NumberSpace.Increment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.NumberSpace.Decrement">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.NumberSpace.Reset(System.UInt64)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:common.libs.NumberSpaceUInt32">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.NumberSpaceUInt32.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="defaultVal"></param>
        </member>
        <member name="M:common.libs.NumberSpaceUInt32.Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.NumberSpaceUInt32.Increment">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.NumberSpaceUInt32.Decrement">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.NumberSpaceUInt32.Reset(System.UInt32)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:common.libs.BoolSpace">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.BoolSpace.#ctor(System.Boolean)">
            <summary>
            /
            </summary>
            <param name="defaultVal"></param>
        </member>
        <member name="P:common.libs.BoolSpace.IsDefault">
            <summary>
            是否是原始值
            </summary>
        </member>
        <member name="M:common.libs.BoolSpace.Reverse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.BoolSpace.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.ProcessHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.ProcessHelper.GetCurrentProcess">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.ProcessHelper.GetMemory(System.Diagnostics.Process)">
            <summary>
            
            </summary>
            <param name="proc"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.ProcessHelper.GetMemory2">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:common.libs.ProcessHelper.GetCpu(System.Diagnostics.Process)">
            <summary>
            
            </summary>
            <param name="proc"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.ProxySystemSetting">
            <summary>
            代理系统设置
            </summary>
        </member>
        <member name="M:common.libs.ProxySystemSetting.WindowsSet(System.String)">
            <summary>
            windows 下， “应用级”也就是直接运行exe时，可以直接修改当前用户的注册表
            而作为 windows service时，无法修改，需要模拟登录当前用户，才能修改，而模拟登录还需要SE_TCB_NAME权限，并不能保证一定修改成功，这就增加了复杂性。
            所以，直接获取 HKEY_USERS 下的所有key，直接修改所有用户的注册表，反而更简单
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:common.libs.ProxySystemSetting.Set(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:common.libs.ProxySystemSetting.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.QuickLZ">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.QuickLZ.QLZ_VERSION_MAJOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.QuickLZ.QLZ_VERSION_MINOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.QuickLZ.QLZ_VERSION_REVISION">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.QuickLZ.QLZ_STREAMING_BUFFER">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.QuickLZ.QLZ_MEMORY_SAFE">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.QuickLZ.SizeDecompressed(System.Byte[])">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.QuickLZ.SizeCompressed(System.Byte[])">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.QuickLZ.Compress(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="level"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:common.libs.QuickLZ.Decompress(System.Byte[])">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:common.libs.rateLimit.IRateLimit`1">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:common.libs.rateLimit.IRateLimit`1.SetRate(`0,System.Int32)">
            <summary>
            单独设置某个对象的速率
            </summary>
            <param name="key"></param>
            <param name="rate"></param>
        </member>
        <member name="M:common.libs.rateLimit.IRateLimit`1.Try(`0,System.Int32)">
            <summary>
            检查一下是否可通行
            </summary>
            <param name="key">对象key</param>
            <param name="num">本次输入的值</param>
            <returns>消耗值，0则表示未能消耗任何流量</returns>
        </member>
        <member name="M:common.libs.rateLimit.IRateLimit`1.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:common.libs.rateLimit.IRateLimit`1.Clear">
            <summary>
            清理，清理后需init后才能再次使用
            </summary>
        </member>
        <member name="T:common.libs.rateLimit.SlidingWindowRateLimit`1">
            <summary>
            滑动窗口算法
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:common.libs.rateLimit.SlidingWindowRateLimit`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="rate"></param>
        </member>
        <member name="M:common.libs.rateLimit.SlidingWindowRateLimit`1.SetRate(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="rate"></param>
        </member>
        <member name="M:common.libs.rateLimit.SlidingWindowRateLimit`1.Try(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.rateLimit.SlidingWindowRateLimit`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:common.libs.rateLimit.SlidingWindowRateLimit`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.rateLimit.TokenBucketRatelimit`1">
            <summary>
            令牌桶算法
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:common.libs.rateLimit.TokenBucketRatelimit`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="rate"></param>
        </member>
        <member name="M:common.libs.rateLimit.TokenBucketRatelimit`1.SetRate(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="rate"></param>
        </member>
        <member name="M:common.libs.rateLimit.TokenBucketRatelimit`1.Try(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.rateLimit.TokenBucketRatelimit`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:common.libs.rateLimit.TokenBucketRatelimit`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.ReceiveDataBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.ReceiveDataBuffer.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.ReceiveDataBuffer.Data">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.ReceiveDataBuffer.AddRange(System.Memory{System.Byte})">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:common.libs.ReceiveDataBuffer.AddRange(System.Memory{System.Byte},System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:common.libs.ReceiveDataBuffer.AddRange(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:common.libs.ReceiveDataBuffer.RemoveRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:common.libs.ReceiveDataBuffer.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="clearData"></param>
        </member>
        <member name="T:common.libs.ReflectionHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.ReflectionHelper.GetInterfaceSchieves(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.ReflectionHelper.GetInterfaceSchieves(System.Reflection.Assembly[],System.Type)">
            <summary>
            
            </summary>
            <param name="assemblys"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.ReflectionHelper.GetSubClass(System.Reflection.Assembly[],System.Type)">
            <summary>
            
            </summary>
            <param name="assemblys"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:common.libs.SimpleSubPushHandler`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:common.libs.SimpleSubPushHandler`1.Sub(System.Action{`0})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:common.libs.SimpleSubPushHandler`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:common.libs.SimpleSubPushHandler`1.Remove(System.Action{`0})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:common.libs.StringHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.StringHelper.RandomPasswordString(System.Int32)">
            <summary>
            
            </summary>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:common.libs.StringHelper.RandomPasswordStringMd5">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:common.libs.ValuePacket`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:common.libs.ValuePacket`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.WheelTimer`1">
            <summary>
            时间轮延时任务
            </summary>
        </member>
        <member name="M:common.libs.WheelTimer`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.WheelTimer`1.NewTimeout(common.libs.WheelTimerTimeoutTask{`0},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="delayMs"></param>
            <param name="reuse"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:common.libs.WheelTimerBucket`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:common.libs.WheelTimerBucket`1.List">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.WheelTimerBucket`1.AddTimeout(common.libs.WheelTimerTimeout{`0})">
            <summary>
            
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:common.libs.WheelTimerBucket`1.Remove(System.Collections.Generic.LinkedListNode{common.libs.WheelTimerTimeout{`0}})">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:common.libs.WheelTimerTimeout`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:common.libs.WheelTimerTimeout`1.Delay">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.WheelTimerTimeout`1.Rounds">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.WheelTimerTimeout`1.Reuse">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.WheelTimerTimeout`1.Task">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.WheelTimerTimeout`1.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:common.libs.WheelTimerTimeout`1.IsCanceled">
            <summary>
            
            </summary>
        </member>
        <member name="M:common.libs.WheelTimerTimeout`1.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.WheelTimerTimeout`1.TimeoutState">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.WheelTimerTimeout`1.TimeoutState.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:common.libs.WheelTimerTimeout`1.TimeoutState.Canceld">
            <summary>
            
            </summary>
        </member>
        <member name="T:common.libs.WheelTimerTimeoutTask`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:common.libs.WheelTimerTimeoutTask`1.State">
            <summary>
            保存状态数据
            </summary>
        </member>
        <member name="P:common.libs.WheelTimerTimeoutTask`1.Callback">
            <summary>
            不要抛异常影响轮转时间
            </summary>
        </member>
    </members>
</doc>
